/* 
 * Werewolf Engine
 *
 * This is a werewolf game engine for REST access. It is primarily developed for CPE200 class at Computer Engineering, Chiang Mai University.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: pruetboonma@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using WerewolfAPI.Client;
using WerewolfAPI.Model;

namespace WerewolfAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new player to the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Player</returns>
        Player AddPlayer (Player body);

        /// <summary>
        /// Add a new player to the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> AddPlayerWithHttpInfo (Player body);
        /// <summary>
        /// Deletes a player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns></returns>
        void DeletePlayer (long? playerId);

        /// <summary>
        /// Deletes a player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePlayerWithHttpInfo (long? playerId);
        /// <summary>
        /// Finds Players by game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>List&lt;Player&gt;</returns>
        List<Player> FindPlayersByGame (string gameID);

        /// <summary>
        /// Finds Players by game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        ApiResponse<List<Player>> FindPlayersByGameWithHttpInfo (string gameID);
        /// <summary>
        /// Find player by ID
        /// </summary>
        /// <remarks>
        /// Returns a single player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Player</returns>
        Player GetPlayerById (long? playerId);

        /// <summary>
        /// Find player by ID
        /// </summary>
        /// <remarks>
        /// Returns a single player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> GetPlayerByIdWithHttpInfo (long? playerId);
        /// <summary>
        /// Login into a player account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Player</returns>
        Player LoginPlayer (Player body);

        /// <summary>
        /// Login into a player account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> LoginPlayerWithHttpInfo (Player body);
        /// <summary>
        /// Player logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>List&lt;Player&gt;</returns>
        List<Player> LogoutPlayer (string sessionID);

        /// <summary>
        /// Player logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        ApiResponse<List<Player>> LogoutPlayerWithHttpInfo (string sessionID);
        /// <summary>
        /// Get list of players
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Player&gt;</returns>
        List<Player> PlayerGet ();

        /// <summary>
        /// Get list of players
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        ApiResponse<List<Player>> PlayerGetWithHttpInfo ();
        /// <summary>
        /// Update an existing player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns></returns>
        void UpdatePlayer (Player body);

        /// <summary>
        /// Update an existing player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePlayerWithHttpInfo (Player body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a new player to the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> AddPlayerAsync (Player body);

        /// <summary>
        /// Add a new player to the system
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> AddPlayerAsyncWithHttpInfo (Player body);
        /// <summary>
        /// Deletes a player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePlayerAsync (long? playerId);

        /// <summary>
        /// Deletes a player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlayerAsyncWithHttpInfo (long? playerId);
        /// <summary>
        /// Finds Players by game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        System.Threading.Tasks.Task<List<Player>> FindPlayersByGameAsync (string gameID);

        /// <summary>
        /// Finds Players by game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Player>>> FindPlayersByGameAsyncWithHttpInfo (string gameID);
        /// <summary>
        /// Find player by ID
        /// </summary>
        /// <remarks>
        /// Returns a single player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> GetPlayerByIdAsync (long? playerId);

        /// <summary>
        /// Find player by ID
        /// </summary>
        /// <remarks>
        /// Returns a single player
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerByIdAsyncWithHttpInfo (long? playerId);
        /// <summary>
        /// Login into a player account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> LoginPlayerAsync (Player body);

        /// <summary>
        /// Login into a player account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> LoginPlayerAsyncWithHttpInfo (Player body);
        /// <summary>
        /// Player logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        System.Threading.Tasks.Task<List<Player>> LogoutPlayerAsync (string sessionID);

        /// <summary>
        /// Player logout
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Player>>> LogoutPlayerAsyncWithHttpInfo (string sessionID);
        /// <summary>
        /// Get list of players
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Player&gt;</returns>
        System.Threading.Tasks.Task<List<Player>> PlayerGetAsync ();

        /// <summary>
        /// Get list of players
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Player>>> PlayerGetAsyncWithHttpInfo ();
        /// <summary>
        /// Update an existing player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePlayerAsync (Player body);

        /// <summary>
        /// Update an existing player
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlayerAsyncWithHttpInfo (Player body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayerApi : IPlayerApi
    {
        private WerewolfAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = WerewolfAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = WerewolfAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WerewolfAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a new player to the system 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Player</returns>
        public Player AddPlayer (Player body)
        {
             ApiResponse<Player> localVarResponse = AddPlayerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new player to the system 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>ApiResponse of Player</returns>
        public ApiResponse< Player > AddPlayerWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->AddPlayer");

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Add a new player to the system 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> AddPlayerAsync (Player body)
        {
             ApiResponse<Player> localVarResponse = await AddPlayerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a new player to the system 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Player>> AddPlayerAsyncWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->AddPlayer");

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Deletes a player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns></returns>
        public void DeletePlayer (long? playerId)
        {
             DeletePlayerWithHttpInfo(playerId);
        }

        /// <summary>
        /// Deletes a player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePlayerWithHttpInfo (long? playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerApi->DeletePlayer");

            var localVarPath = "/player/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePlayerAsync (long? playerId)
        {
             await DeletePlayerAsyncWithHttpInfo(playerId);

        }

        /// <summary>
        /// Deletes a player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlayerAsyncWithHttpInfo (long? playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerApi->DeletePlayer");

            var localVarPath = "/player/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Finds Players by game 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>List&lt;Player&gt;</returns>
        public List<Player> FindPlayersByGame (string gameID)
        {
             ApiResponse<List<Player>> localVarResponse = FindPlayersByGameWithHttpInfo(gameID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finds Players by game 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        public ApiResponse< List<Player> > FindPlayersByGameWithHttpInfo (string gameID)
        {
            // verify the required parameter 'gameID' is set
            if (gameID == null)
                throw new ApiException(400, "Missing required parameter 'gameID' when calling PlayerApi->FindPlayersByGame");

            var localVarPath = "/player/findByGame/{gameID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameID != null) localVarPathParams.Add("gameID", Configuration.ApiClient.ParameterToString(gameID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPlayersByGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Finds Players by game 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        public async System.Threading.Tasks.Task<List<Player>> FindPlayersByGameAsync (string gameID)
        {
             ApiResponse<List<Player>> localVarResponse = await FindPlayersByGameAsyncWithHttpInfo(gameID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finds Players by game 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameID">Game id</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Player>>> FindPlayersByGameAsyncWithHttpInfo (string gameID)
        {
            // verify the required parameter 'gameID' is set
            if (gameID == null)
                throw new ApiException(400, "Missing required parameter 'gameID' when calling PlayerApi->FindPlayersByGame");

            var localVarPath = "/player/findByGame/{gameID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gameID != null) localVarPathParams.Add("gameID", Configuration.ApiClient.ParameterToString(gameID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPlayersByGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Find player by ID Returns a single player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Player</returns>
        public Player GetPlayerById (long? playerId)
        {
             ApiResponse<Player> localVarResponse = GetPlayerByIdWithHttpInfo(playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find player by ID Returns a single player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>ApiResponse of Player</returns>
        public ApiResponse< Player > GetPlayerByIdWithHttpInfo (long? playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerApi->GetPlayerById");

            var localVarPath = "/player/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Find player by ID Returns a single player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerByIdAsync (long? playerId)
        {
             ApiResponse<Player> localVarResponse = await GetPlayerByIdAsyncWithHttpInfo(playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find player by ID Returns a single player
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">ID of player to return</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerByIdAsyncWithHttpInfo (long? playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerApi->GetPlayerById");

            var localVarPath = "/player/{playerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarPathParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlayerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Login into a player account 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Player</returns>
        public Player LoginPlayer (Player body)
        {
             ApiResponse<Player> localVarResponse = LoginPlayerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login into a player account 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>ApiResponse of Player</returns>
        public ApiResponse< Player > LoginPlayerWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->LoginPlayer");

            var localVarPath = "/player/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;
            if(localVarStatusCode >= 400)
            {
                Exception exception = ExceptionFactory("LoginPlayer", localVarResponse);
                throw exception;
            }

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Login into a player account 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> LoginPlayerAsync (Player body)
        {
             ApiResponse<Player> localVarResponse = await LoginPlayerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login into a player account 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that at least contains login/password</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Player>> LoginPlayerAsyncWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->LoginPlayer");

            var localVarPath = "/player/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Player>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Player) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Player)));
        }

        /// <summary>
        /// Player logout 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>List&lt;Player&gt;</returns>
        public List<Player> LogoutPlayer (string sessionID)
        {
             ApiResponse<List<Player>> localVarResponse = LogoutPlayerWithHttpInfo(sessionID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Player logout 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        public ApiResponse< List<Player> > LogoutPlayerWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling PlayerApi->LogoutPlayer");

            var localVarPath = "/player/logout/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Player logout 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>Task of List&lt;Player&gt;</returns>
        public async System.Threading.Tasks.Task<List<Player>> LogoutPlayerAsync (string sessionID)
        {
             ApiResponse<List<Player>> localVarResponse = await LogoutPlayerAsyncWithHttpInfo(sessionID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Player logout 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionID">ID of player&#39;s session to logout</param>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Player>>> LogoutPlayerAsyncWithHttpInfo (string sessionID)
        {
            // verify the required parameter 'sessionID' is set
            if (sessionID == null)
                throw new ApiException(400, "Missing required parameter 'sessionID' when calling PlayerApi->LogoutPlayer");

            var localVarPath = "/player/logout/{sessionID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sessionID != null) localVarPathParams.Add("sessionID", Configuration.ApiClient.ParameterToString(sessionID)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutPlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Get list of players 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Player&gt;</returns>
        public List<Player> PlayerGet ()
        {
             ApiResponse<List<Player>> localVarResponse = PlayerGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list of players 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Player&gt;</returns>
        public ApiResponse< List<Player> > PlayerGetWithHttpInfo ()
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Get list of players 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Player&gt;</returns>
        public async System.Threading.Tasks.Task<List<Player>> PlayerGetAsync ()
        {
             ApiResponse<List<Player>> localVarResponse = await PlayerGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list of players 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Player&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Player>>> PlayerGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Player>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Player>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Player>)));
        }

        /// <summary>
        /// Update an existing player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns></returns>
        public void UpdatePlayer (Player body)
        {
             UpdatePlayerWithHttpInfo(body);
        }

        /// <summary>
        /// Update an existing player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePlayerWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->UpdatePlayer");

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an existing player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePlayerAsync (Player body)
        {
             await UpdatePlayerAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update an existing player 
        /// </summary>
        /// <exception cref="WerewolfAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Player object that needs to be added to the system</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlayerAsyncWithHttpInfo (Player body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerApi->UpdatePlayer");

            var localVarPath = "/player";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlayer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
